@page "/counter"
@inject HttpClient httpClient

<h3>User List</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else if (users.Length == 0)
{
    <p>No users found.</p>
}
else
{
    <table>
        <thead>
        <tr>
            <th>userId</th>
            <th>Username</th>
            <th>Email</th>
            <th>Password</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.userId</td>
                    <td>@user.username</td>
                    <td>@user.email</td>
                    <td>@user.password</td>
                    <td>
                        <button @onclick="()=>GetUserById(user.userId.ToString())">Get by ID</button>
                        <button @onclick="()=>DeleteUser(user.userId.ToString())">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedUser != null)
{
    <div>
        <h3>Selected User</h3>
        <p><strong>User ID:</strong> @selectedUser.userId</p>
        <p><strong>Username:</strong> @selectedUser.username</p>
        <p><strong>Email:</strong> @selectedUser.email</p>
        <p><strong>Password:</strong> @selectedUser.password</p>

        <h4>Edit User</h4>
        <form>
            <label>Username:</label>
            <input type="text" @bind="selectedUser.username" /><br />
             <label>Email:</label>
                        <select @bind="selectedUser.email">
                            <option value="User">User</option>
                            <option value="User_M">User_M</option>
                            <option value="Admin">Admin</option>
                        </select><br />
            <label>Password:</label>
            <input type="password" @bind="selectedUser.password" /><br />
            <button @onclick="UpdateUser">Update</button>
        </form>
    </div>
}

<div>
    <h3>Create New User</h3>
    <form>
            <label>Username:</label>
            <input type="text" @bind="newUser.username" /><br />
            <label>Email:</label>
            <select @bind="newUser.email">
                <option value="User">User</option>
                <option value="User_M">User_M</option>
                <option value="Admin">Admin</option>
            </select><br />
            <label>Password:</label>
            <input type="password" @bind="newUser.password" /><br />
            <button @onclick="CreateUser">Create</button>
        </form>
</div>

@code {
    private User[]? users;
    private User newUser = new User();
    private User selectedUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await httpClient.GetFromJsonAsync<User[]>("http://localhost:5298/api/Users");
    }

    private async Task CreateUser()
    {
    // Generate a new ID for the user
        newUser.userId = Guid.NewGuid();

    // Send the new user data to the API for creation
        await httpClient.PostAsJsonAsync("http://localhost:5298/api/Users", newUser);

    // Refresh the user list
        await LoadUsers();

    // Reset the newUser object
        newUser = new User();
    }

    private async Task GetUserById(string id)
    {
        selectedUser = await httpClient.GetFromJsonAsync<User>($"http://localhost:5298/api/Users/{id}");
    }

    private async Task DeleteUser(string id)
    {
        await httpClient.DeleteAsync($"http://localhost:5298/api/Users/{id}");
        await LoadUsers();
    }

    private async Task UpdateUser()
    {
        if (!IsValidEmail(selectedUser.email))
        {
            return;
        }

        await httpClient.PutAsJsonAsync($"http://localhost:5298/api/Users/{selectedUser.userId}", selectedUser);
        selectedUser = null;
        await LoadUsers();
    }

    private bool IsValidEmail(string email)
    {
        var validEmails = new[] { "User", "User_M", "Admin" };
        if (!validEmails.Contains(email))
        {
            return false;
        }
        return true;
    }

    public class User
    {
        public Guid userId { get; set; }
        public string? email { get; set; }
        public string? password { get; set; }
        public string? username { get; set; }
    }
}